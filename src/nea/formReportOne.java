/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nea;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Michal
 */
public class formReportOne extends javax.swing.JFrame {

    /**
     * One per day
     * <p>
     * Shows the day and month dd/mm
     * <p>
     * Maximum: 7 bars
     */
    int BAR_SPACING_DAY = 0;

    /**
     * One per week
     * <p>
     * shows the w/c day of each month
     * <p>
     * Maximum: 12 bars
     */
    int BAR_SPACING_WEEK = 1;

    /**
     * One per month
     * <p>
     * Shown the month name
     * <p>
     * Maximum: 13 bars
     */
    int BAR_SPACING_MONTH = 2;

    /**
     * One per quarter
     * <p>
     * Shows the quarter and year
     * <p>
     * Maximum: 13 bars
     */
    int BAR_SPACING_QUARTER = 3;

    /**
     * One per year
     * <p>
     * Shows the year YYyy
     * <p>
     * Maximum: None
     */
    int BAR_SPACING_YEAR = 4;

    private static final Logger logger = Logger.getLogger(formReportOne.class.getName());
    Connection conn = null;
    formMainMenu previousForm = null;

    // For formatting dates into an appropriate format
    DateTimeFormatter daymonth = DateTimeFormatter.ofPattern("dd/MM");
    DateTimeFormatter year = DateTimeFormatter.ofPattern("yy");

    public formReportOne() {
        initComponents();
        this.setLocationRelativeTo(null);

        // Makes the option to set a custom start date and end date invisible temporarily
        lblStart.setVisible(false);
        dcStart.setVisible(false);
        lblEnd.setVisible(false);
        dcEnd.setVisible(false);

        // Listens for a change in the selectedIndex
        cbTime.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (cbTime.getSelectedIndex() == cbTime.getItemCount() - 1) {
                    // If the user selected the last item i.e. 'Other'
                    // Makes the date selectors for start and end date visible
                    lblStart.setVisible(true);
                    dcStart.setVisible(true);
                    lblEnd.setVisible(true);
                    dcEnd.setVisible(true);
                } else {
                    // Makes the date selectors for start and end date invisible
                    lblStart.setVisible(false);
                    dcStart.setVisible(false);
                    lblEnd.setVisible(false);
                    dcEnd.setVisible(false);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSalesAnalysis = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        pParam = new javax.swing.JPanel();
        btnAnalyze = new javax.swing.JButton();
        lblDataToAnalyse = new javax.swing.JLabel();
        cbData = new javax.swing.JComboBox<>();
        cbTime = new javax.swing.JComboBox<>();
        lblTime = new javax.swing.JLabel();
        lblStart = new javax.swing.JLabel();
        dcStart = new com.toedter.calendar.JDateChooser();
        dcEnd = new com.toedter.calendar.JDateChooser();
        lblEnd = new javax.swing.JLabel();
        pOutput = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sales Analysis");

        lblSalesAnalysis.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblSalesAnalysis.setText("Sales Analysis");

        btnBack.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        pParam.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pParam.setMinimumSize(new java.awt.Dimension(0, 200));

        btnAnalyze.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnAnalyze.setText("Analyze");
        btnAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalyzeActionPerformed(evt);
            }
        });

        lblDataToAnalyse.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblDataToAnalyse.setText("Data to analyse:");

        cbData.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cbData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Invoices", "Quotations", "Both" }));

        cbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Past month", "Past year", "This month", "This quarter", "This year", "This financial year", "All Time", "Other" }));

        lblTime.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblTime.setText("Time Period:");

        lblStart.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblStart.setText("Start Date: ");

        lblEnd.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblEnd.setText("End Date: ");

        javax.swing.GroupLayout pParamLayout = new javax.swing.GroupLayout(pParam);
        pParam.setLayout(pParamLayout);
        pParamLayout.setHorizontalGroup(
            pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pParamLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pParamLayout.createSequentialGroup()
                        .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataToAnalyse)
                            .addComponent(lblTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbData, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbTime, 0, 150, Short.MAX_VALUE)))
                    .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAnalyze)
                        .addGroup(pParamLayout.createSequentialGroup()
                            .addComponent(lblStart)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dcStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                            .addComponent(lblEnd)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dcEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6))
        );
        pParamLayout.setVerticalGroup(
            pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pParamLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataToAnalyse)
                    .addComponent(cbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime))
                .addGap(10, 10, 10)
                .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dcStart, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(lblStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dcEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(lblEnd)))
                .addGap(18, 18, 18)
                .addComponent(btnAnalyze)
                .addContainerGap())
        );

        pOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pOutput.setMinimumSize(new java.awt.Dimension(0, 0));
        pOutput.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pParam, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(243, 243, 243)
                        .addComponent(lblSalesAnalysis)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalesAnalysis)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Goes back to the previous form
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        previousForm.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_btnBackActionPerformed

    // When the user clicks the Analyze button
    private void btnAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalyzeActionPerformed
        // Whether the user wants to load invoices or quotations, both can be true
        boolean getInvoices = false;
        boolean getQuotations = false;

        // Dates from which to get the results from
        // End date is always the current date unless user specifies otherwise
        LocalDateTime start = null;
        LocalDateTime end = LocalDateTime.now();

        // Default labels on the bar chart
        String title = "Value invoiced/quoted against time";
        String xLabel = "Date";
        String yLabel = "Value invoiced/quoted";

        // Sets the boolean for whether to load invoices, quotations or both AND sets the title and yLabel correctly
        switch (cbData.getSelectedIndex()) {
            case 0:// User wants to analyze just the invoices
                getInvoices = true;
                title = "Value invoiced against time";
                yLabel = "Value invoiced";
                break;
            case 1:// User wants to analyze just the quotations
                getQuotations = true;
                title = "Value quoted against time";
                yLabel = "Value quoted";
                break;
            case 2:// Both invoices and quotations
                getInvoices = true;
                getQuotations = true;
                break;
        }

        // Code for assigning the start date for each choice in cbTime
        // Boolean for input validity, assume always valid
        boolean valid = false;
        switch (cbTime.getSelectedIndex()) {
            case 0:// Past month
                start = LocalDate.now().minusMonths(1).atTime(0, 0, 0);
                valid = true;
                break;
            case 1:// Past year
                start = LocalDate.now().minusMonths(12).atTime(0, 0, 0);
                valid = true;
                break;
            case 2:// This month
                start = LocalDate.now().withDayOfMonth(1).atTime(0, 0, 0);
                valid = true;
                break;
            case 3:// This quarter
                start = Utility.getQuarterStart(LocalDate.now()).atTime(0, 0, 0);
                valid = true;
                break;
            case 4:// This year
                start = LocalDate.now().withDayOfYear(1).atTime(0, 0, 0);
                valid = true;
                break;
            case 5:// This financial year
                start = Utility.getFinancialYear(LocalDate.now()).atTime(0, 0, 0);
                valid = true;
                break;
            case 6:// All time
                conn = sqlManager.openConnection();

                // Gets the date_created of the first invoice and quotation ever created
                if (getInvoices && !getQuotations) {
                    // Analyze just invoices
                    start = sqlManager.getEarliestDateTime(conn, "tblInvoice", "date_created");

                } else if (!getInvoices && getQuotations) {
                    // Analyze just quotations
                    start = sqlManager.getEarliestDateTime(conn, "tblQuotation", "date_created");

                } else if (getInvoices && getQuotations) {
                    start = sqlManager.getDateOfFirstReceipt(conn);
                }
                valid = true;
                sqlManager.closeConnection(conn);
                break;
            case 7:// Other

                if (dcStart.getDate() == null) {
                    ErrorMsg.throwError(ErrorMsg.EMPTY_INPUT_FIELD_ERROR, "Start date cannot be empty");
                    valid = false;

                } else if (dcEnd.getDate() == null) {
                    ErrorMsg.throwError(ErrorMsg.EMPTY_INPUT_FIELD_ERROR, "End date cannot be empty");
                    valid = false;

                } else if (dcEnd.getDate().before(dcStart.getDate())) {
                    ErrorMsg.throwCustomError("Start Date should be before the end date", "Invalid Input Error");
                    valid = false;

                } else {
                    // If the date inputs pass the obove checks then these are set as the start and end date
                    start = dcStart.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate().atTime(0, 0, 0);
                    end = dcEnd.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate().atTime(23, 59, 59);
                    valid = true;
                }
                break;
        }

        // If input start and end date is valid
        if (valid) {

            // Calculates the amounts of days between the dates
            Duration dr = Duration.between(start, end);
            int daysBetweenDates = (int) dr.toDays();

            // Determines the spacing of the bars in the bar chart and the xLabels
            // This is done to ensure there is never too many bars displayed i.e. one bar for each day over 2 years
            int barSpacing = BAR_SPACING_WEEK;

            if (daysBetweenDates < 7) {
                barSpacing = BAR_SPACING_DAY;
                xLabel = "Date of day (dd/mm)";

            } else if (daysBetweenDates < 84) {
                barSpacing = BAR_SPACING_WEEK;
                xLabel = "Date of day of commencing week (dd/mm)";

            } else if (daysBetweenDates < 366) {
                barSpacing = BAR_SPACING_MONTH;
                xLabel = "Month (month-year)";

            } else if (daysBetweenDates < 365 * 3) {
                barSpacing = BAR_SPACING_QUARTER;
                xLabel = "Quarter (quarter-year)";

            } else if (daysBetweenDates >= 365 * 3) {
                barSpacing = BAR_SPACING_YEAR;
                xLabel = "Year";
            }

            // Gets the CategoryDataset with all the data
            CategoryDataset data;
            data = getData(getInvoices, getQuotations, start, end, barSpacing);

            displayBarChart(title, xLabel, yLabel, data);
        }
    }//GEN-LAST:event_btnAnalyzeActionPerformed

    private void displayBarChart(String title, String xLabel, String yLabel, CategoryDataset data) {
        // Creates the JFreeChart bar chart
        JFreeChart barChart = ChartFactory.createBarChart(
                title,
                xLabel,
                yLabel,
                data,
                PlotOrientation.VERTICAL,
                cbData.getSelectedIndex() == 2, // only shows the legend if the user analyzed invoices and quotations
                true,
                false);

        // Adds horizontal grid lines to the plot
        CategoryPlot p = barChart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);

        // Makes the x axis labels vertical to conserve space
        CategoryAxis axis = barChart.getCategoryPlot().getDomainAxis();
        axis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);

        // Clears the JPanel and adds the ChartPanel which holds the barChart graphic
        ChartPanel barPanel = new ChartPanel(barChart);
        pOutput.removeAll();
        pOutput.add(barPanel, BorderLayout.CENTER);

        // Validates the JPanel to make sure changes are visible
        pOutput.validate();

        // Leftover code in case I want to open the report as a new window
//        CategoryPlot p = barChart.getCategoryPlot();
//        p.setRangeGridlinePaint(Color.black);
//        ChartFrame frame = new ChartFrame("Bar chart", barChart);
//        frame.setLocationRelativeTo(null);
//        frame.setVisible(true);
//        frame.setSize(450, 350);
    }

    // Creates an empty hashmap and then populates it with all the time categories
    private LinkedHashMap<String, Double> generateEmptyDict(LocalDateTime start, LocalDateTime end, int barSpacing) {
        // Init
        LinkedHashMap<String, Double> output = new LinkedHashMap<>();

        if (barSpacing == BAR_SPACING_DAY) {
            // Creates one bar per day analyzed
            LocalDateTime counter = start;
            output.put(counter.format(daymonth), 0.00);

            while (!counter.toLocalDate().isEqual(end.toLocalDate())) {
                // Moves to the next day and adds it to the hashmap
                counter = counter.plusDays(1);
                output.put(counter.format(daymonth), 0.00);
            }

        } else if (barSpacing == BAR_SPACING_WEEK) {
            // Creates one bar per week analyzed
            LocalDateTime counter = start;

            while (counter.toLocalDate().isBefore(end.toLocalDate())) {
                // Moves to the next week and adds it to the hashmap
                output.put(counter.format(daymonth), 0.00);
                counter = counter.plusWeeks(1);
            }

        } else if (barSpacing == BAR_SPACING_MONTH) {
            // Creates one bar per month analyzed
            LocalDateTime counter = start;

            while (counter.toLocalDate().isBefore(end.toLocalDate())) {
                // Moves to the next month and adds it to the hashmap
                output.put(counter.toLocalDate().getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + "-" + counter.format(year), 0.00);
                counter = counter.plusMonths(1);
            }
            // Adds the final month which doesn't get added in the while loop
            output.put(end.toLocalDate().getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + "-" + end.format(year), 0.00);

        } else if (barSpacing == BAR_SPACING_QUARTER) {
            // Creates one bar per quarter analyzed
            LocalDateTime counter = start;

            while (counter.toLocalDate().isBefore(end.toLocalDate())) {
                // Moves to the next quarter and adds it to the hashmap
                output.put(Utility.getQuarter(counter.toLocalDate()) + "-" + counter.format(year), 0.00);
                counter = counter.plusMonths(3);
            }
            // Adds the final quarter which doesn't get added in the while loop
            output.put(Utility.getQuarter(end.toLocalDate()) + "-" + end.format(year), 0.00);

        } else if (barSpacing == BAR_SPACING_YEAR) {
            // Creates one bar per year analyzed
            LocalDateTime counter = start;

            while (counter.toLocalDate().isBefore(end.toLocalDate())) {
                // Moves to the next year and adds it to the hashmap
                output.put("" + counter.getYear(), 0.00);
                counter = counter.plusYears(1);
            }
            // Adds the final tear which doesn't get added in the while loop
            output.put("" + end.getYear(), 0.00);
        }

        return output;
    }

    // Generates the dataset by fetching the data from the DB
    private CategoryDataset getData(boolean getInvoices, boolean getQuotations, LocalDateTime start, LocalDateTime end, int barSpacing) {

        // CategoryDataSet for the final output
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Init
        LinkedHashMap<String, Double> dataArr_Invoice = null;
        LinkedHashMap<String, Double> dataArr_Quotation = null;

        if (getInvoices) {
            // Gets the hashmap with all the invoice data categorised
            dataArr_Invoice = getInvoiceDataSetHashMap(start, end, barSpacing);

            // Goes through each Entry in the hashmap and adds it to the dataset
            for (Map.Entry<String, Double> i : dataArr_Invoice.entrySet()) {
                dataset.addValue(i.getValue(), "Invoice", i.getKey());
            }
        }
        if (getQuotations) {
            // Gets the hashmap with all the invoice data categorised
            dataArr_Quotation = getQuotationDataSetHashMap(start, end, barSpacing);

            // Goes through each Entry in the hashmap and adds it to the dataset
            for (Map.Entry<String, Double> i : dataArr_Quotation.entrySet()) {
                dataset.addValue(i.getValue(), "Quotation", i.getKey());
            }
        }

        // If the user wanted to analyze invoices and quotations then the values for 'Both' are calculated
        if (getInvoices && getQuotations) {
            // Goes through each Entry in the hashmap
            for (Map.Entry<String, Double> i : dataArr_Invoice.entrySet()) {
                if (i.getValue() != 0.0 && dataArr_Quotation.get(i.getKey()) != 0.) {
                    // Adds the total of both to the dataset
                    dataset.addValue(i.getValue() + dataArr_Quotation.get(i.getKey()), "Both", i.getKey());
                }
            }
        }

        // Returns the populated dataset
        return dataset;
    }

    // Returns the hashmap with all the invoice data categorised
    private LinkedHashMap<String, Double> getInvoiceDataSetHashMap(LocalDateTime start, LocalDateTime end, int barSpacing) {
        conn = sqlManager.openConnection();

        // Init
        LinkedHashMap<String, Double> dataArr_Invoice;
        dataArr_Invoice = generateEmptyDict(start, end, barSpacing);

        // Raw SQL query: https://pastebin.com/RJ5B4hpc
        String query = "SELECT i.date_created,"
                + " COALESCE(SUM(iD.quantity * iD.unit_price), 0) AS invoiceTotal"
                + " FROM tblInvoice i"
                + " INNER JOIN tblInvoiceDetail iD ON i.invoice_id = iD.invoice_id"
                + " WHERE i.date_created BETWEEN ? AND ?"
                + " GROUP BY i.invoice_id"
                + " ORDER BY i.date_created";

        try {
            // Query Setup & Execution
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setObject(1, start);
            pstmt.setObject(2, end);
            ResultSet rs = pstmt.executeQuery();

            if (barSpacing == BAR_SPACING_DAY) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key = rs.getDate(1).toLocalDate().format(daymonth);

                    // The total value of the invoice
                    Double invoiceTotal = rs.getDouble(2);

                    // Add the invoiceTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Invoice.get(key);
                    double after = before + invoiceTotal;
                    dataArr_Invoice.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_WEEK) {
                // Stores the date when the week commences
                LocalDateTime counter = start;

                while (rs.next()) {
                    // Calculates days and weeks between the counter and date of the data being added
                    Duration dr = Duration.between(counter, rs.getDate(1).toLocalDate().atTime(0, 0, 0));
                    int daysBetween = (int) dr.toDays();
                    int weeksBetween = daysBetween / 7;

                    // If the data is not within the same commencing week
                    if (daysBetween >= 7) {
                        counter = counter.plusWeeks(weeksBetween);
                    }

                    // The key in the hashmap
                    String key = counter.format(daymonth);

                    // The total value of the invoice
                    Double invoiceTotal = rs.getDouble(2);

                    // Add the invoiceTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Invoice.get(key);
                    double after = before + invoiceTotal;
                    dataArr_Invoice.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_MONTH) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key_month = rs.getDate(1).toLocalDate().getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
                    String key_year = rs.getDate(1).toLocalDate().format(year);
                    String key = key_month + "-" + key_year;

                    // The total value of the invoice
                    Double invoiceTotal = rs.getDouble(2);

                    // Add the invoiceTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Invoice.get(key);
                    double after = before + invoiceTotal;
                    dataArr_Invoice.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_QUARTER) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key_quarter = Utility.getQuarter(rs.getDate(1).toLocalDate());
                    String key_year = rs.getDate(1).toLocalDate().format(year);
                    String key = key_quarter + "-" + key_year;

                    // The total value of the invoice
                    Double invoiceTotal = rs.getDouble(2);

                    // Add the invoiceTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Invoice.get(key);
                    double after = before + invoiceTotal;
                    dataArr_Invoice.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_YEAR) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key = String.valueOf(rs.getDate(1).toLocalDate().getYear());

                    // The total value of the invoice
                    Double invoiceTotal = rs.getDouble(2);

                    // Add the invoiceTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Invoice.get(key);
                    double after = before + invoiceTotal;
                    dataArr_Invoice.put(key, after);
                }
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "SQLException");
        }
        sqlManager.closeConnection(conn);

        return dataArr_Invoice;
    }

    // Returns the hashmap with all the quotation data categorised
    private LinkedHashMap<String, Double> getQuotationDataSetHashMap(LocalDateTime start, LocalDateTime end, int barSpacing) {
        conn = sqlManager.openConnection();

        // Init
        LinkedHashMap<String, Double> dataArr_Quotation = null;
        dataArr_Quotation = generateEmptyDict(start, end, barSpacing);

        // Raw SQL query: https://pastebin.com/uA3ifThF
        String query = "SELECT q.date_created,"
                + " COALESCE(SUM(qD.quantity * qD.unit_price), 0) as quotationTotal"
                + " FROM tblQuotation q"
                + " INNER JOIN tblQuotationDetail qD ON q.quotation_id = qD.quotation_id"
                + " WHERE q.date_created BETWEEN ? AND ?"
                + " GROUP BY q.quotation_id"
                + " ORDER BY q.quotation_id";

        try {
            // Query Setup & Execution
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setObject(1, start);
            pstmt.setObject(2, end);
            ResultSet rs = pstmt.executeQuery();

            if (barSpacing == BAR_SPACING_DAY) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key = rs.getDate(1).toLocalDate().format(daymonth);

                    // The total value of the quotation
                    Double quotationTotal = rs.getDouble(2);

                    // Add the quotationTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Quotation.get(key);
                    double after = before + quotationTotal;
                    dataArr_Quotation.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_WEEK) {
                // Stores the date when the week commences
                LocalDateTime counter = start;

                while (rs.next()) {
                    // Calculates days and weeks between the counter and date of the data being added
                    Duration dr = Duration.between(counter, rs.getDate(1).toLocalDate().atTime(0, 0, 0));
                    int daysBetween = (int) dr.toDays();
                    int weeksBetween = daysBetween / 7;

                    // If the data is not within the same commencing week
                    if (daysBetween >= 7) {
                        counter = counter.plusWeeks(weeksBetween);
                    }

                    // The key in the hashmap
                    String key = counter.format(daymonth);

                    // The total value of the quotation
                    Double quotationTotal = rs.getDouble(2);

                    // Add the quotationTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Quotation.get(key);
                    double after = before + quotationTotal;
                    dataArr_Quotation.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_MONTH) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key_month = rs.getDate(1).toLocalDate().getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
                    String key_year = rs.getDate(1).toLocalDate().format(year);
                    String key = key_month + "-" + key_year;

                    // The total value of the quotation
                    Double quotationTotal = rs.getDouble(2);

                    // Add the quotationTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Quotation.get(key);
                    double after = before + quotationTotal;
                    dataArr_Quotation.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_QUARTER) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key_quarter = Utility.getQuarter(rs.getDate(1).toLocalDate());
                    String key_year = rs.getDate(1).toLocalDate().format(year);
                    String key = key_quarter + "-" + key_year;

                    // The total value of the quotation
                    Double quotationTotal = rs.getDouble(2);

                    // Add the quotationTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Quotation.get(key);
                    double after = before + quotationTotal;
                    dataArr_Quotation.put(key, after);
                }
            } else if (barSpacing == BAR_SPACING_YEAR) {
                while (rs.next()) {
                    // The key in the hashmap
                    String key = String.valueOf(rs.getDate(1).toLocalDate().getYear());

                    // The total value of the quotation
                    Double quotationTotal = rs.getDouble(2);

                    // Add the quotationTotal to the hashmap by adding it to the existing value
                    double before = dataArr_Quotation.get(key);
                    double after = before + quotationTotal;
                    dataArr_Quotation.put(key, after);
                }
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "SQLException");
        }
        sqlManager.closeConnection(conn);

        return dataArr_Quotation;
    }

    // Used when the form is opened from within another form
    public formReportOne getFrame() {
        return this;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formReportOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formReportOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formReportOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formReportOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formReportOne().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalyze;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cbData;
    private javax.swing.JComboBox<String> cbTime;
    private com.toedter.calendar.JDateChooser dcEnd;
    private com.toedter.calendar.JDateChooser dcStart;
    private javax.swing.JLabel lblDataToAnalyse;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblSalesAnalysis;
    private javax.swing.JLabel lblStart;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel pOutput;
    private javax.swing.JPanel pParam;
    // End of variables declaration//GEN-END:variables
}
