/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nea;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Michal
 */
public class formAddEmployee extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(formAddEmployee.class.getName());

    // Previous form the user came from
    formManageEmployees previousForm = null;

    public formAddEmployee() {
        initComponents();
        // Don't close the entire program if the AddEmployee window is closed
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);

        // Gets the ID for the new employee
        int EmployeeID = sqlManager.getNextPKValue("tblEmployee", "employee_id");
        txtEmployeeID.setText(String.valueOf(EmployeeID));

        // Notifies the previous form that the user is no longer adding a new employee.
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosing(WindowEvent e) {
                previousForm.CurrentlyAddingEmployee = false;
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });

        // Updates the fullName JTextField each time the input forename and surname changes
        DocumentListener dListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                lblFullName.setText(txtForename.getText() + " " + txtSurname.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                lblFullName.setText(txtForename.getText() + " " + txtSurname.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        };
        txtForename.getDocument().addDocumentListener(dListener);
        txtSurname.getDocument().addDocumentListener(dListener);

    }

    // Used when the form is opened from within another form
    public formAddEmployee getFrame() {
        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFullName = new javax.swing.JLabel();
        lblEmployeeID = new javax.swing.JLabel();
        lblForename = new javax.swing.JLabel();
        lblSurname = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblCounty = new javax.swing.JLabel();
        lblPostcode = new javax.swing.JLabel();
        lblPhoneNumber = new javax.swing.JLabel();
        lblEmailAddress = new javax.swing.JLabel();
        lblAdmin = new javax.swing.JLabel();
        txtEmployeeID = new javax.swing.JTextField();
        txtForename = new javax.swing.JTextField();
        txtSurname = new javax.swing.JTextField();
        txtAddress1 = new javax.swing.JTextField();
        txtAddress2 = new javax.swing.JTextField();
        txtAddress3 = new javax.swing.JTextField();
        txtCounty = new javax.swing.JTextField();
        txtPostcode = new javax.swing.JTextField();
        txtPhoneNumber = new javax.swing.JTextField();
        txtEmailAddress = new javax.swing.JTextField();
        cbAdmin = new javax.swing.JCheckBox();
        btnAddEmployee = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Employee");

        lblFullName.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblFullName.setText(" ");

        lblEmployeeID.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblEmployeeID.setText("Employee ID:");

        lblForename.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblForename.setText("Forename:");

        lblSurname.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblSurname.setText("Surname:");

        lblAddress.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblAddress.setText("Address:");

        lblCounty.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblCounty.setText("County:");

        lblPostcode.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblPostcode.setText("Postcode:");
        lblPostcode.setToolTipText("");

        lblPhoneNumber.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblPhoneNumber.setText("Phone number:");

        lblEmailAddress.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblEmailAddress.setText("Email address:");

        lblAdmin.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblAdmin.setText("Admin:");

        txtEmployeeID.setEditable(false);

        txtAddress1.setToolTipText("");

        btnAddEmployee.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        btnAddEmployee.setText("Add employee");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(lblAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAddress3)
                            .addComponent(txtAddress2)
                            .addComponent(txtAddress1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblForename)
                            .addComponent(lblSurname)
                            .addComponent(lblEmployeeID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtForename, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addComponent(txtSurname))))
                    .addComponent(lblFullName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPhoneNumber)
                            .addComponent(lblEmailAddress)
                            .addComponent(lblPostcode)
                            .addComponent(lblCounty)
                            .addComponent(lblAdmin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtPostcode, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCounty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbAdmin))
                                .addGap(117, 117, 117)
                                .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(lblFullName)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmployeeID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblForename)
                            .addComponent(txtForename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSurname)
                            .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAddress)
                            .addComponent(txtAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddress3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCounty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCounty))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPostcode)
                            .addComponent(txtPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPhoneNumber)
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmailAddress)
                            .addComponent(txtEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAdmin)
                            .addComponent(cbAdmin)))
                    .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
        JTextField[] inputFields = {txtForename, txtSurname, txtAddress1, txtCounty, txtPostcode, txtPhoneNumber, txtEmailAddress};

        // Checks if any of the input fields are empty
        if (Utility.countEmptyFields(inputFields) != 0) {
            ErrorMsg.throwError(ErrorMsg.EMPTY_INPUT_FIELD_ERROR);
        } else if (validInputs()) {
            // Asks user whether they really want to add this employee
            int YesNo = JOptionPane.showConfirmDialog(null, "Are you sure you want to add this employee?",
                    "Add new employee", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION);

            // If response is yes
            if (YesNo == 0) {
                String[] loginDetails = getLoginDetails();
                if (loginDetails != null) {
                    String query = "INSERT into tblEmployee"
                            + " (employee_id, forename, surname, address1, address2,"
                            + " address3, county, postcode, phone_number, email_address,"
                            + " username, password_hash, admin, date_last_logged_in)"
                            + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                    int newEmployeeID = sqlManager.getNextPKValue("tblEmployee", "employee_id");

                    try (Connection conn = sqlManager.openConnection()) {
                        // Query Setup & Execution
                        PreparedStatement pstmt = conn.prepareStatement(query);
                        pstmt.setInt(1, newEmployeeID);
                        pstmt.setString(2, txtForename.getText());
                        pstmt.setString(3, txtSurname.getText());
                        pstmt.setString(4, txtAddress1.getText());
                        // If address2 or address3 are empty then they are replaced by null instead of ""
                        pstmt.setString(5, (txtAddress2.getText().isEmpty() ? null : txtAddress2.getText()));
                        pstmt.setString(6, (txtAddress3.getText().isEmpty() ? null : txtAddress3.getText()));
                        pstmt.setString(7, txtCounty.getText());
                        pstmt.setString(8, txtPostcode.getText());
                        pstmt.setString(9, txtPhoneNumber.getText());
                        pstmt.setString(10, txtEmailAddress.getText());

                        pstmt.setString(11, loginDetails[0]);
                        pstmt.setBytes(12, Utility.hash(loginDetails[1]));
                        pstmt.setBoolean(13, cbAdmin.isSelected());
                        pstmt.setString(14, "0000-00-00 00:00:00");

                        int rowsAffected = pstmt.executeUpdate();
                        logger.log(Level.INFO, rowsAffected + " rows inserted.");

                    } catch (SQLException e) {
                        logger.log(Level.SEVERE, "SQLException");
                    }

                    // Refreshes the employee table in the previous form since a new employee was added
                    previousForm.loadEmployees();
                    // Closes the addEmployee form (current form)
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    // Asks user for the new employee's login details
    private String[] getLoginDetails() {
        // Init
        String[] responses = null;
        boolean validInputs = false;

        while (!validInputs) {
            // Gets the user's responses
            responses = Utility.JOptionPaneMultiInput("What login details should this employee have?",
                    new String[]{"Username", "Confirm username", "Password", "Confirm password"});

            // If the user closed the input window
            if (responses == null) {
                logger.log(Level.INFO, "Login Details Input Dialog closed");
                return null;

            } else if (!responses[0].equals(responses[1]) || !responses[2].equals(responses[3])) {
                ErrorMsg.throwError(ErrorMsg.INPUT_DETAILS_MISMATCH_ERROR);

            } else if (responses[0].length() < 4) {
                // Checks if the username is of minimum length (4)
                ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_SHORT, "username");

            } else if (responses[2].length() < 4) {
                // Checks if the password is of minimum length (4)
                ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_SHORT, "password");

            } else if (responses[0].length() > sqlManager.getMaxColumnLength("tblEmployee", "username")) {
                ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "username");

            } else if (responses[2].length() > 128) {
                ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "password");

            } else if (sqlManager.RecordExists("tblEmployee", "username", responses[0])) {
                ErrorMsg.throwError(ErrorMsg.ALREADY_EXISTS_ERROR, "Employee with this username");

            } else {
                // If the inputs pass all the above validity checks then boolean set to true
                validInputs = true;
            }
        }
        // Returns all valid user responses
        return new String[]{responses[0], responses[2]};
    }

    // Validates input lengths against the max lengths allowed in the DBMS
    private boolean validInputs() {

        boolean valid = false;

        if (txtForename.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "forename")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "forename");

        } else if (txtSurname.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "surname")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "surname");

        } else if (txtAddress1.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "address1")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "address line 1");

        } else if (txtAddress2.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "address2")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "address line 2");

        } else if (txtAddress3.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "address3")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "address line 3");

        } else if (txtCounty.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "county")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "county");

        } else if (txtPostcode.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "postcode")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "postcode");

        } else if (txtPhoneNumber.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "phone_number")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "phone number");

        } else if (!Pattern.matches("^[0-9]+$", txtPhoneNumber.getText())) {
            ErrorMsg.throwError(ErrorMsg.NUMBER_FORMAT_ERROR, "The phone number must not contain letters");

        } else if (txtEmailAddress.getText().length() > sqlManager.getMaxColumnLength("tblEmployee", "email_address")) {
            ErrorMsg.throwError(ErrorMsg.INPUT_LENGTH_ERROR_LONG, "email address");

        } else {
            // If all inputs passed the validity checks then boolean set to true
            valid = true;
        }

        return valid;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formAddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formAddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formAddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formAddEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formAddEmployee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JCheckBox cbAdmin;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAdmin;
    private javax.swing.JLabel lblCounty;
    private javax.swing.JLabel lblEmailAddress;
    private javax.swing.JLabel lblEmployeeID;
    private javax.swing.JLabel lblForename;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblPostcode;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JTextField txtAddress1;
    private javax.swing.JTextField txtAddress2;
    private javax.swing.JTextField txtAddress3;
    private javax.swing.JTextField txtCounty;
    private javax.swing.JTextField txtEmailAddress;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JTextField txtForename;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtPostcode;
    private javax.swing.JTextField txtSurname;
    // End of variables declaration//GEN-END:variables
}
